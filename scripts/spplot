#!/usr/bin/env python

import re
import sys
from glob import glob
from os import getcwd
from os.path import abspath, exists, join

import numpy as np
import matplotlib
import pylab
import scipy.interpolate


def read_fortran(filename):
    """ Reads Fortran style binary data and returns a numpy array.
    """
    with open(filename, 'rb') as f:
        # read size of record
        f.seek(0)
        n = np.fromfile(f, dtype='int32', count=1)[0]

        # read contents of record
        f.seek(4)
        v = np.fromfile(f, dtype='float32')

    return v[:-1]


def mesh2grid(v, x, z):
    """ Interpolates from an unstructured coordinates (mesh) to a structured
        coordinates (grid)
    """
    lx = x.max() - x.min()
    lz = z.max() - z.min()
    nn = v.size
    mesh = _stack(x, z)

    nx = int(np.around(np.sqrt(nn*lx/lz)))
    nz = int(np.around(np.sqrt(nn*lz/lx)))
    dx = lx/nx
    dz = lz/nz

    # construct structured grid
    x = np.linspace(x.min(), x.max(), nx)
    z = np.linspace(z.min(), z.max(), nz)
    X, Z = np.meshgrid(x, z)
    grid = _stack(X.flatten(), Z.flatten())

    # interpolate to structured grid
    V = scipy.interpolate.griddata(mesh, v, grid, 'linear')

    # workaround edge issues
    if np.any(np.isnan(V)):
        W = scipy.interpolate.griddata(mesh, v, grid, 'nearest')
        for i in np.where(np.isnan(V)):
            V[i] = W[i]

    return np.reshape(V, (int(nz), int(nx))), x, z


def exist_files(names):
    """Wrapper for os.path.exists"""
    for name in names:
        if not name:
            return False
        elif not isinstance(name, str):
            raise TypeError
        elif not exists(name):
            return False
    else:
        return True


def get_coord_files(dir):
    for files in [
        [abspath(join(dir, subdir, 'proc000000_x.bin')),
         abspath(join(dir, subdir, 'proc000000_z.bin'))]
         for subdir in [
         '.',
         '../model_init',
         '../../model_init',
         '../../../model_init',
         '../../../../model_init',
         '../output/model_init',
         '../../output/model_init',
         '../../../output/model_init',
         '../../../../output/model_init',
         ]]:
        if exist_files(files):
            return files
    else:
        raise Exception("coordinate files not found")


def get_data_files(dir):
    files = []
    for file in glob(dir+'/'+'proc*.bin*'):
        if 'jacobian' in file or \
           'ibool' in file or \
           '_x.bin' in file or \
           '_z.bin' in file:
            continue
        files += [file]
    return sorted(files)

def get_trace_files(dir):
    files = []
    for file in glob(dir+'/'+'*.npy'):
        if 'vx_' in file or \
           'vy_' in file or \
           'vz_' in file:
            files += [file]
    return sorted(files)

def get_title(file):
    pattern = '.*proc(.*).bin'
    return re.match(pattern, file).group(1)



def _stack(*args):
    return np.column_stack(args)



if __name__ == '__main__':
    """ Plots data on 2-D unstructured mesh
      Original code by Ryan Modrak:
      http://tigress-web.princeton.edu/~rmodrak/visualize/plot2d

      Can be used to plot models or kernels

      SYNTAX
          spplot  <model_dir>
          e.g. spplot projects/example_checker_sh/model_true
    """
    
    # get coornidate files
    x_coords_file, z_coords_file = get_coord_files(sys.argv[1])
    x = read_fortran(x_coords_file)
    z = read_fortran(z_coords_file)
    
    files = get_data_files(sys.argv[1])

    for database_file in files:
        # component name
        comp = get_title(database_file)
        if len(sys.argv) >= 3 and sys.argv[2] not in database_file:
            continue

        # read database file
        v = read_fortran(database_file)

        # check mesh dimensions
        assert x.shape == z.shape == v.shape, 'Inconsistent mesh dimensions.'


        # interpolate to uniform rectangular grid
        V, X, Z = mesh2grid(v, x, z)

        # display figure
        pylab.figure(figsize=(8, 6))
        amax = abs(V).max()
        pylab.pcolor(X, Z, V, vmin=amax*-1, vmax=amax)
        locs = np.arange(X.min(), X.max() + 1, (X.max() - X.min()) / 5)
        pylab.xticks(locs)
        pylab.ticklabel_format(style='sci', axis='x', scilimits=(0,0))
        locs = np.arange(Z.min(), Z.max() + 1, (Z.max() - Z.min()) / 5)
        pylab.yticks(locs)
        pylab.ticklabel_format(style='sci', axis='y', scilimits=(0,0))
        pylab.colorbar()
        pylab.xlabel('x')
        pylab.ylabel('z')
        pylab.title(comp)
        pylab.gca().invert_yaxis()
        pylab.set_cmap('seismic')

        pylab.savefig(database_file.replace('.bin', '.png'), dpi=300)

    if exists(join(sys.argv[1], 'trace_data.npy')):
        from obspy import Stream, Trace

        data = np.fromfile(join(sys.argv[1], 'trace_data.npy'), dtype='float32')
        nt = int(data[0])
        nrec = int(data[1])
        dt = data[2]
        files = get_trace_files(sys.argv[1])

        for trace_file in files:
            traces = []
            trace = np.fromfile(trace_file, dtype='float32').reshape([nrec, nt])
            for i in range(nrec):
                traces.append(Trace(data=trace[i,:], header={'delta': dt, 'network': 'SYN', 'station': 'STA%03d' % (i,)}))
            stream = Stream(traces=traces)
            stream.plot(size=(800, 1000), outfile=trace_file.replace('.npy', '.png'))
